use v6.d;

use lib '.';
use lib './lib';

use DSL::Shared::Entity::Actions::WL::System;
use DSL::Shared::Entity::Grammar::EntityNames;
use DSL::Shared::Entity::ResourceAccess;

my DSL::Shared::Entity::ResourceAccess $resourceObj .= new;

$resourceObj.ingest-resource-files();

grammar ParseObj
        does DSL::Shared::Entity::Grammar::EntityNames {
    rule TOP($obj, $class) { <entity-name($obj, $class)> }
};

grammar ParseObj2
        does DSL::Shared::Entity::Grammar::EntityNames {
    rule TOP($obj) { <entity-name($obj, Whatever)> }
};

sub parse-func(Str $class, Str:D $spec) {
    ParseObj.parse(
            $spec.lc,
            rule => 'TOP',
            actions => DSL::Shared::Entity::Actions::WL::System.new(resources => $resourceObj),
            args => ($resourceObj, $class)
            ).made
}

sub parse-func2( Str:D $spec) {
    ParseObj2.parse(
            $spec.lc,
            rule => 'TOP',
            actions => DSL::Shared::Entity::Actions::WL::System.new(resources => $resourceObj),
            args => ($resourceObj,)
            ).made
}

use Test;

plan 4;

## 1
is-deeply
        parse-func('DataFormat', 'character 32'),
        '"Character32"',
        'character 32';

## 2
is-deeply
        parse-func('DataFormat', 'Character32'),
        '"Character32"',
        'Character32';

## 3
is-deeply
        parse-func2('character 32'),
        '"Character32"',
        'character 32';

## 4
is-deeply
        parse-func2('Character32'),
        '"Character32"',
        'Character32';

done-testing;
